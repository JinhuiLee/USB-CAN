package com.itu;

import java.nio.ByteBuffer;

import org.usb4java.Context;
import org.usb4java.Device;
import org.usb4java.DeviceDescriptor;
import org.usb4java.DeviceHandle;
import org.usb4java.DeviceList;
import org.usb4java.LibUsb;
import org.usb4java.LibUsbException;

public class Usbcan {
	
	static public Device findDevice(short vendorId, short productId)
	{
	    // Read the USB device list
	    DeviceList list = new DeviceList();
	    int result = LibUsb.getDeviceList(null, list);
	    if (result < 0) throw new LibUsbException("Unable to get device list", result);

	    try
	    {
	        // Iterate over all devices and scan for the right one
	        for (Device device: list)
	        {
	            DeviceDescriptor descriptor = new DeviceDescriptor();
	            result = LibUsb.getDeviceDescriptor(device, descriptor);
	            if (result != LibUsb.SUCCESS) throw new LibUsbException("Unable to read device descriptor", result);
	            if ( descriptor.idVendor() == vendorId && descriptor.idProduct() == productId) { 
	            	System.out.println("found can bus");
	            	return device;
	            	
	            }
	        }
	    }
	    finally
	    {
	        // Ensure the allocated device list is freed
	    	//System.out.println("Exception");
	        //LibUsb.freeDeviceList(list, true);
	    }

	    // Device not found
	    return null;
	}
	
	public static void main(String[] args) {
		System.out.println("hello word");
		Context context = new Context();
		int result = LibUsb.init(context);
		if (result != LibUsb.SUCCESS) throw new LibUsbException("Unable to initialize libusb.", result);
		short vendorId = 1155, productId = 1638;
		Device device = findDevice(vendorId,productId);

		DeviceHandle handle = new DeviceHandle();
		result = LibUsb.open(device, handle);
		if (result != LibUsb.SUCCESS) throw new LibUsbException("Unable to open USB device", result);
		try
		{
			System.out.println("Ok ");
		    // Use device handle here
			result = LibUsb.claimInterface(handle, interfaceNumber);
			if (result != LibUsb.SUCCESS) throw new LibUsbException("Unable to claim interface", result);
			
			ByteBuffer buffer = ByteBuffer.allocateDirect(8);
			buffer.put(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 });
			int transfered = LibUsb.controlTransfer(handle, 
			    (byte) (LibUsb.REQUEST_TYPE_CLASS | LibUsb.RECIPIENT_INTERFACE),
			    (byte) 0x09, (short) 2, (short) 1, buffer, 2);
			if (transfered < 0) throw new LibUsbException("Control transfer failed", transfered);
			System.out.println(transfered + " bytes sent");
			
		}
		finally
		{
		    LibUsb.close(handle);
		}
		
		
		LibUsb.exit(context);
	}
}
