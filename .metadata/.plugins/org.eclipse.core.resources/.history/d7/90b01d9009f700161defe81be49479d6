package com.itu;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.IntBuffer;

import org.usb4java.BufferUtils;
import org.usb4java.Context;
import org.usb4java.Device;
import org.usb4java.DeviceDescriptor;
import org.usb4java.DeviceHandle;
import org.usb4java.DeviceList;
import org.usb4java.LibUsb;
import org.usb4java.LibUsbException;

public class Usbcan {
	/** The ADB input endpoint of the Samsung Galaxy Nexus. */
    private static final byte IN_ENDPOINT = (byte) 0x82;

    /** The ADB output endpoint of the Samsung Galaxy Nexus. */
    private static final byte OUT_ENDPOINT = 0x02;
    
    private static final int TIMEOUT = 5000;
    
	static public Device findDevice(short vendorId, short productId)
	{
	    // Read the USB device list
	    DeviceList list = new DeviceList();
	    int result = LibUsb.getDeviceList(null, list);
	    if (result < 0) throw new LibUsbException("Unable to get device list", result);

	    try
	    {
	        // Iterate over all devices and scan for the right one
	        for (Device device: list)
	        {
	            DeviceDescriptor descriptor = new DeviceDescriptor();
	            result = LibUsb.getDeviceDescriptor(device, descriptor);
	            
//	            System.out.println(descriptor.idVendor());
//	            System.out.println(descriptor.idProduct());
	            
	            if (result != LibUsb.SUCCESS) throw new LibUsbException("Unable to read device descriptor", result);
	            if ( descriptor.idVendor() == vendorId && descriptor.idProduct() == productId) { 
	            	System.out.println("found can bus");
	            	return device;
	            	
	            }
	        }
	    }
	    finally
	    {
	        // Ensure the allocated device list is freed
	    	//System.out.println("Exception");
	        //LibUsb.freeDeviceList(list, true);
	    }

	    // Device not found
	    return null;
	}
	
	
	
	public static void write(DeviceHandle handle, byte[] data)
    {
        ByteBuffer buffer = BufferUtils.allocateByteBuffer(data.length);
        buffer.put(data);
        IntBuffer transferred = BufferUtils.allocateIntBuffer();
        int result = LibUsb.bulkTransfer(handle, OUT_ENDPOINT, buffer,
            transferred, TIMEOUT);
        if (result != LibUsb.SUCCESS)
        {
            throw new LibUsbException("Unable to send data", result);
        }
        System.out.println(transferred.get() + " bytes sent to device");
    }

    /**
     * Reads some data from the device.
     * 
     * @param handle
     *            The device handle.
     * @param size
     *            The number of bytes to read from the device.
     * @return The read data.
     */
    public static ByteBuffer read(DeviceHandle handle, int size)
    {
        ByteBuffer buffer = BufferUtils.allocateByteBuffer(size).order(
            ByteOrder.LITTLE_ENDIAN);
        IntBuffer transferred = BufferUtils.allocateIntBuffer();
        int result = LibUsb.bulkTransfer(handle, IN_ENDPOINT, buffer,
            transferred, TIMEOUT);
        if (result != LibUsb.SUCCESS)
        {
            throw new LibUsbException("Unable to read data", result);
        }
        System.out.println(transferred.get() + " bytes read from device");
        return buffer;
    }
	
	
	public static void main(String[] args) {
		System.out.println("hello word");
		Context context = new Context();
		int result = LibUsb.init(context);
		if (result != LibUsb.SUCCESS) throw new LibUsbException("Unable to initialize libusb.", result);
		short vendorId = 1155, productId = 1638;
		//short vendorId = 1003, productId = 8465;
		Device device = findDevice(vendorId,productId);

		DeviceHandle handle = new DeviceHandle();
		result = LibUsb.open(device, handle);
		if (result != LibUsb.SUCCESS) throw new LibUsbException("Unable to open USB device", result);
		try
		{
			System.out.println("Ok ");
		    // Use device handle here
			result = LibUsb.claimInterface(handle , 0);
			if (result != LibUsb.SUCCESS) throw new LibUsbException("Unable to claim interface", result);
			byte[] SendBuff = new byte[6];
	        int i = 0;
	        SendBuff[i++] = (byte)(11);
	        SendBuff[i++] = (byte)(22);
	        SendBuff[i++] = (byte)(33);
	        SendBuff[i++] = (byte)(44);
	        SendBuff[i++] = (byte)(55);
	        SendBuff[i++] = (byte)(66);
			write(handle,SendBuff);
			ByteBuffer header = read(handle, 24);
	        header.position(12);
	        int dataSize = header.asIntBuffer().get();
			
		}
		finally
		{
		    LibUsb.close(handle);
		}
		
		
		LibUsb.exit(context);
	}
}
